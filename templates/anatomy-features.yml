anatomy-features:

  - name: python_pytest
    variables:
      addopts:
        - '--tb=short'
        # PyLama
        - '--pylama'
        # Django
        - '--reuse-db'
        - '--ds ax.api_calc.settings'
      timeout: 30

    items:
      - name: pytestini
        add-file-block:
          filename: pytest.ini
          contents: |
            # Automatically generated with zops.anatomy.

            [pytest]
            addopts = {{python_pytest.addopts|join(' ')}}
            timeout = {{python_pytest.timeout}}

  # NOTE: Groups ignores for all IDEs, for now, PyCharm and Eclipse.
  - name: ide_ignores
    items:
      - name: gitignore
        add-file-block:
          filename: .gitignore
          contents: |
            /.idea/
            /.settings/
            /.project
            /.pydevproject

  - name: python_project
    items:
      - name: gitignore
        add-file-block:
          filename: .gitignore
          contents: |
            *.pyc
            *.pyd
            *.pyo
            # setuptools
            /*.egg-info/
            /.eggs/
            __pycache__/
            /dist/
            /build/
            # Where is this created?
            /.cache/

      # NOTE: We're not making namespace optional for our projects.
      - name: namespace_init
        add-file-block:
          filename: '{{project.code_namespace}}/__init__.py'
          contents: |
            """
            Automatically generated with zops.anatomy.
            """
            try:
                __import__('pkg_resources').declare_namespace(__name__)
            except ImportError:
                __path__ = __import__('pkgutil').extend_path(__path__, __name__)

  - name: ansible_ignores
    items:
      - name: gitignore
        add-file-block:
          filename: .gitignore
          contents: |
            /*.retry

  - name: python_setuptools
    items:
      - name: gitignore
        add-file-block:
          filename: .gitignore
          contents: |
            /*.retry

      - name: setuppy
        add-file-block:
          filename: setup.py
          contents: |
            #!/bin/env python
            """
            Automatically generated with zops.anatomy.
            """
            import os

            from pip.req import parse_requirements
            from setuptools import setup


            # REFERENCE: http://stackoverflow.com/questions/14399534
            install_requires = [
                str(i.req)
                for i in parse_requirements(
                    os.path.join(os.path.dirname(__file__), 'requirements/base.include'),
                    session='hack',  # Bogus value
                )
            ]

            setup_kwargs = dict(
                name='{{project.code_namespace}}.{{project.name}}',
                url='https://github.com/{{repo.user}}/{{repo.prefix}}.{{project.code_name}}',
                description="{{project.description}}",
                long_description='''{{project.description}}''',
                classifiers=[
                    'Development Status :: 3 - Alpha',
                    'Programming Language :: Python :: 3',
                    'Programming Language :: Python :: 3.5',
                ],
                keywords=['axado', 'api'],
            )

            # Versioning
            setup_kwargs['use_scm_version'] =True

            # Packages (using namespace)
            setup_kwargs['include_package_data'] = True
            setup_kwargs['packages'] = ['{{project.code_namespace}}', '{{project.code_namespace}}.{{project.code_name}}']
            setup_kwargs['namespace_packages'] = ['{{project.code_namespace}}']

            # Dependencies
            setup_kwargs['install_requires'] = install_requires
            setup_kwargs['dependency_links'] = []
            setup_kwargs['setup_requires'] = ['setuptools_scm']
            setup_kwargs['tests_require'] = []

            # ZOPs
            setup_kwargs['entry_points'] = """
              [zops.plugins]
              {{project.code_namespace}}.{{project.name}}={{project.code_namespace}}.{{project.code_name}}.zops:main
            """

            setup(**setup_kwargs)

  - name: ci
    items:
      - name: gitignore
        add-file-block:
          filename: .gitignore
          contents: |
            /junit.xml

  - name: django
    items:
      - name: managepy
        add-file-block:
          filename: manage.py
          contents: |
            #!/usr/bin/env python
            """
            Automatically generated with zops.anatomy.
            """
            import os
            import sys

            if __name__ == "__main__":
                os.environ.setdefault("DJANGO_SETTINGS_MODULE", "ax.{{project.code_name}}.settings")
                from django.core.management import execute_from_command_line
                execute_from_command_line(sys.argv)

      # # IDEA:
      # - pytest-ini:
      #   addopts:
      #     - '--reuse-db'
      #     - '--ds ax.api_calc.settings'

  - name: python_pytest_pylama
    items:
      - name: pylama_ini
        add-file-block:
          filename: pylama.ini
          contents: |
            # Automatically generated with zops.anatomy.

            [pylama]
            skip = */migrations/*,node_modules/*,static/*,static_root/*,src/*
            linters = pep8,pyflakes

            [pylama:pep8]
            max_line_length = 120

      # # IDEA:
      # - pytest-ini:
      #   addopts:
      #     - '--pylama'

      # # IDEA:
      # - append-variable:
      #     python-pytest.addopts:
      #       - '--pylama'

      # # IDEA:
      # - add-python-dependencies:
      #   - pylama

      # # IDEA:
      # - append-variable:
      #     dependencies.python:
      #       - pylama
